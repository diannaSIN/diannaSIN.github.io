[{"content":"1panel搭建与配置 1panel是一个linux服务器运维管理面板\n安装 在你的VPS中执行以下安装脚本，根据命令提示完成1panel的安装（国际版1panel，推荐）：\n1 curl -sSL https://resource.1panel.pro/quick_start.sh -o quick_start.sh \u0026amp;\u0026amp; bash quick_start.sh 如果你的服务器是在国内或者想要使用国内版1panel使用以下命令：\n1 bash -c \u0026#34;$(curl -sSL https://resource.fit2cloud.com/1panel/package/v2/quick_start.sh)\u0026#34; 安装完成以后在网页中进入你的1panel管理面板，地址为：\n1 http://目标服务器 IP 地址:目标端口/安全入口 配置 1. Docker存储目录迁移(在此之前尽量先不要执行任何其他的操作，不要安装任何容器) 因为默认安装后docker的存储目录非常小，如果要安装大量容器或者容器可能产生大量数据的情况下就需要迁移Docker容器的目录\n第一步停止docker：\n第二步：首先找到Docker默认的存储目录，并且将它删除\n第三步：在根目录创建Docker存储目录\n在vps终端执行以下命令：\n1 mkdir -p /docker 或者直接在1panel的根目录创建：\n第四步:在Docker的配置中添加如下代码将存储目录指向你刚刚创建的目录，并执行重启\n1 2 3 { \u0026#34;data-root\u0026#34;: \u0026#34;/docker\u0026#34; } 至此Docker的目录就已经迁移完成了\n2.安装第三方库 由于1panel面板的docker不能直接使用docker-compose、缺少部分有趣/实用的应用容器等，我们需要安装第三方应用库\n前提：现在你的终端安装git\n1 sudo apt install git 默认1Panel安装在/opt/路径下，如果你不是安装在这个目录，那需要你自己更改一下命令中的路径\n在你的VPS终端，或者1panel中的系统\u0026ndash;\u0026gt;终端中，依次执行以下命令，安装第三方应用库\n1 git clone -b localApps https://github.com/okxlin/appstore /opt/1panel/resource/apps/local/appstore-localApps 1 cp -rf /opt/1panel/resource/apps/local/appstore-localApps/apps/* /opt/1panel/resource/apps/local/ 1 rm -rf /opt/1panel/resource/apps/local/appstore-localApps 如果你是国内网络或、国内VPS那么选择以下命令执行\n1 git clone -b localApps https://ghp.ci/https://github.com/okxlin/appstore /opt/1panel/resource/apps/local/appstore-localApps 1 cp -rf /opt/1panel/resource/apps/local/appstore-localApps/apps/* /opt/1panel/resource/apps/local/ 1 rm -rf /opt/1panel/resource/apps/local/appstore-localApps 然后在终端执行以下更新软件库命令：\n1 curl -sSL https://install.lifebus.top/auto_install.sh | bash 接着在这里就可以看到刚刚导入本地的应用库\n在本地应用中找到1Panel-Apps这个应用就可以使用docker-compose的方式安装应用了\n按照以下方式操作：\n下拉，在这里编辑docker-compose文件\n","date":"2025-08-17T20:05:00+08:00","image":"https://raw.githubusercontent.com/diannaSIN/blogImage/image/BlogImage/20250902012055586.jpeg","permalink":"https://tencentx.us.kg/p/1panel%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE/","title":"1panel搭建与配置"},{"content":"3-XUI搭建节点 使用最简单的方式搭建一个vless reality节点，而不是为了性能最大化。使用3-xui本身就是为了GUI操作简单\n本文中的脚本和教程引用了DuangVPS博主发布的教程\n可选项：\nBBR开启和选择模式脚本 （我选14：BBR2+FQ）\n1 wget -N --no-check-certificate \u0026#34;https://github.000060000.xyz/tcpx.sh\u0026#34; \u0026amp;\u0026amp; chmod +x tcpx.sh \u0026amp;\u0026amp; ./tcpx.sh 运行BBR优化脚本（运行脚本之后先选2再运行选3）\n1 bash \u0026lt;(curl -Ls https://github.com/lanziii/bbr-/releases/download/123/tools.sh) 第一步：安装3x-ui 安装命令\n1 bash \u0026lt;(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh) 运行脚本后会有如下提示意思是是否需要自定义配置，键入y然后回车；\n1 Do you want to continue with the modification y/n? 会接连出现如下需要自定义的配置\n1 2 3 Please set up your username: 后面输入要设置的面板用户名 Please set up your password: 后面输入要设置的面板密码 Please set up the panel port: 后面输入你要设置的面板端口 面板创建完成\n如果需要更改配置如端口号等，在终端输入以下命令即可\n1 x-ui 第二步：进入面板创建节点 在浏览器地址栏按照如下格式输入面板地址\n1 vpsip:端口号/面板路径 输入第一步中配置的用户名和密码\n可以在这里重新设置你的X-UI的端口和面板\n点击添加入站\n然后按照下图直接配置就可以\n把图二中客户ID中第一个 ‘-’ 前面的自负复制到图三中Dest(Target)中的.com前面去替换掉原来的字符\n节点这就搭建好了\n第三步：将节点添加到clash 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 proxies: - name: \u0026#34;节点名称\u0026#34; type: vless server: 127.0.0.1 #这里要写节点服务器的公网ip地址 port: 25024 #创建节点时设置的端口号 uuid: 4357ef26-9987-90jx1a-a5df-2151dacc7020 #这里写图二中的ID network: tcp tls: true udp: true flow: xtls-rprx-vision servername: 4287ef26.com # 这里写图二中的Dest(Target)配置的网址 reality-opts: public-key: FlD9auoJ5TkEydv_mORuZ2SEE6WRGFtTjLz2G1awQXQ #这里写图三中获取的公钥 short-id: e6d376d33a5cd40c # 这里写图三中的Short IDs client-fingerprint: random # cannot be empty ","date":"2025-08-16T20:05:00+08:00","image":"https://raw.githubusercontent.com/diannaSIN/blogImage/image/BlogImage/20250902011807426.png","permalink":"https://tencentx.us.kg/p/vlessbuild1/","title":"3-XUI搭建节点"},{"content":"snell节点搭建 本文参考了整点猫咪大佬的文章，并做了一些修改与简化。\n注意：基于debian12，应该适用于debian系列机器。其他发行版需要自己研究基础操作。\n第一步：下载必要软件 1 sudo apt update \u0026amp;\u0026amp; sudo apt install wget unzip neovim -y 如果你不是debian系列机器还需要这一步操作：\n1 sudo dnf install unzip 第二部：下载SnellServer 文档使用的是snell的最新版本也就是V5，根据你的创建时间和实际需求自行去官网查找版本号。\nlinux-amd64\n1 wget https://dl.nssurge.com/snell/snell-server-v5.0.0-linux-amd64.zip ARM架构\n1 wget https://dl.nssurge.com/snell/snell-server-v5.0.0-linux-aarch64.zip 第三步解压 Snell Server 到置顶目录 linux-amd64\n1 sudo unzip snell-server-v5.0.0-linux-amd64.zip -d /usr/local/bin ARM架构\n1 sudo unzip snell-server-v5.0.0-linux-aarch64.zip -d /usr/local/bin 第三步：操作节点搭建 赋予服务器权限\n1 chmod +x /usr/local/bin/snell-server 创建配置文件夹\n1 sudo mkdir /etc/snell 使用Snell的wizard生成一个配置文件\n1 sudo snell-server --wizard -c /etc/snell/snell-server.conf 配置Systemd服务文件\n编辑snell.serverce文件\n1 sudo nvim /lib/systemd/system/snell.service 直接把下面的代码复制粘贴进去\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 [Unit] Description=Snell Proxy Service After=network.target [Service] Type=simple User=nobody Group=nogroup LimitNOFILE=32768 ExecStart=/usr/local/bin/snell-server -c /etc/snell/snell-server.conf AmbientCapabilities=CAP_NET_BIND_SERVICE StandardOutput=syslog StandardError=syslog SyslogIdentifier=snell-server [Install] WantedBy=multi-user.target 继续执行重载服务\n1 sudo systemctl daemon-reload 配置snell开机自启动\n1 sudo systemctl enable snell 查看snell状态\n1 sudo systemctl status snell 执行完以上步骤，并且snell状态没有报错（全绿），那节点就搭建好了\n第四步：查看Snell配置，并且在Surge中添加 查看snell配置\n1 cat /etc/snell/snell-server.conf 你会得到如下输出：\n1 2 3 4 [snell-server] listen = 0.0.0.0:11807 psk = AijHCeos15IvqDZTb1cJMX5GcgZzIVE ipv6 = false 如果直接在surge的配置文件中添加那么直接写：\n1 节点名称 = snell, XXX.XXX.XXX.XXX, 11807, psk=psk, version=5, tfo=true 如果要在Surge的GUI中添加那么这样填写：\n名称：节点名称\n代理类型：选择SNELL\n服务器地址：填写搭建SNELL服务器的IP地址\n端口号：填写listen那里冒号后面的部分\npsk:填写psk\n协议版本：选择v5\nObfs：Disabled\nTCP Fast Open：开启\nIPV4\u0026amp;IPV6：双栈\n","date":"2025-08-16T18:05:00+08:00","image":"https://raw.githubusercontent.com/diannaSIN/blogImage/image/BlogImage/20250902011713034.jpeg","permalink":"https://tencentx.us.kg/p/snell%E8%8A%82%E7%82%B9%E6%90%AD%E5%BB%BA/","title":"snell节点搭建"},{"content":"Nginx Proxy Manager反向代理 Nginx Proxy Manager是一个运行在docker中的反向代理工具 注意：docker的安装与配置不在本笔记中展示，同时也不记录docker的使用方式\n第一步：安装Nginx Proxy Manager docker-compose安装：\n1 2 3 4 5 6 7 8 9 10 11 services: app: image: \u0026#39;jc21/nginx-proxy-manager:latest\u0026#39; restart: unless-stopped ports: - \u0026#39;80:80\u0026#39; - \u0026#39;81:81\u0026#39; - \u0026#39;443:443\u0026#39; volumes: - ./data:/data - ./letsencrypt:/etc/letsencrypt docker-cli安装：\n1 2 3 4 5 6 7 8 9 docker run -d \\ --name=npm \\ -p 80:80 \\ -p 81:81 \\ -p 443:443 \\ -v /home/npm/data:/data \\ -v /home/npm/letsencrypt:/etc/letsencrypt \\ --restart=always \\ jc21/nginx-proxy-manager:latest 第二步：进入Nginx Proxy Manager的web管理面板： web管理面板地址为：vps-ip:81\n默认用户名：admin@example.com\n默认密码：changeme\n第三步：配置反向代理 点击Add Proxy即可添加反向代理\n注意：由于Nginx Proxy Manager是一个docker容器，所以代理本机服务，填写的ip为：172.17.0.1 注意：Nginx Proxy Manager在Add Proxy页面中只能申请单域名证书\n注意：Nginx Proxy Manager申请的免费证书的颁发机构为：Let\u0026rsquo;s Encrypt\n","date":"2025-08-16T03:01:00Z","image":"https://raw.githubusercontent.com/diannaSIN/blogImage/image/BlogImage/20250902011653928.jpg","permalink":"https://tencentx.us.kg/p/nginx-proxy-manager%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","title":"Nginx Proxy Manager反向代理"},{"content":"Nginx反向代理 注意：基于debian12\n第一步：安装Nginx 由于debian的apt包常年不更新软件包版本所以需要先添加nginx的官方软件包到 debian 系统中\n下载密钥\n1 sudo apt install curl gnupg2 ca-certificates lsb-release debian-archive-keyring 导入官方密钥签名\n1 2 curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\ | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg \u0026gt;/dev/null 配置存储库\n1 2 3 echo \u0026#34;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\ http://nginx.org/packages/debian `lsb_release -cs` nginx\u0026#34; \\ | sudo tee /etc/apt/sources.list.d/nginx.list 设置固定存储库\n1 2 echo -e \u0026#34;Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\u0026#34; \\ | sudo tee /etc/apt/preferences.d/99nginx 更新软件包之后安装 nginx\n1 2 sudo apt update sudo apt install nginx 第二步：定位nginx配置 在debian12中 nginx默认的配置文件夹路径\n1 cd /etc/nginx/ 进入这个文件夹创建你要反向代理的服务的文件\n1 2 cd nginx.d touch server.conf 在nginx根目录下新建一个用于存放SSL证书的文件夹\n证书文件夹应该直接存放在 nginx 的根目录\n文件夹内部每一个域名单独设置 比如 nginx/sslFile/example.com\n1 mkdir sslFile 第三步：配置nginx 在conf.d文件夹中创建新的配置文件，一般情况下反代的每一个服务都创建一个新的.conf文件\n结构为：nginx/conf.d/server1.conf server2.conf\n以下配置为个人常用配置模板可以直接使用修改域名和服务端口号即可\n以下配置，如果你没有什么自定义的其他需求直接复制到自己创建的反向代理文件用就可以\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # 强制HTTP重定向到HTTPS（Force SSL） server { listen 80; listen [::]:80; server_name exp.example.com; # 改为您的域名 return 301 https://$host$request_uri; # 自动跳转HTTPS } # 主HTTPS服务配置 server { listen 443 ssl; listen [::]:443 ssl; http2 on; #开启http2支持 server_name exp.example.com; # SSL证书配置 ssl_certificate sslFile/example.com/fullchain.cer; # 替换为您的证书路径 ssl_certificate_key sslFile/example.com/example.key; # 替换为您的私钥路径 ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; # 安全防护配置（Block common exploits） add_header X-Frame-Options \u0026#34;SAMEORIGIN\u0026#34; always; # 防点击劫持 add_header X-XSS-Protection \u0026#34;1; mode=block\u0026#34; always; # 防XSS攻击 add_header X-Content-Type-Options \u0026#34;nosniff\u0026#34; always; # 防MIME嗅探 add_header Referrer-Policy \u0026#34;strict-origin\u0026#34; always; # 控制referrer信息泄露 add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains\u0026#34; always; # 强制HTTPS增强 # 主请求代理配置 location / { proxy_pass http://127.0.0.1:3001; # 自定义后端服务地址 proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; } } nginx常用命令\n1 2 3 4 5 6 7 8 # 检查nginx配置是否有错误 nginx -t # nginx启动 nginx # nginx重启 nginx -s reload ","date":"2025-08-16T02:59:00Z","image":"https://raw.githubusercontent.com/diannaSIN/blogImage/image/BlogImage/20250902011617160.jpg","permalink":"https://tencentx.us.kg/p/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","title":"Nginx反向代理"},{"content":"acme.sh申请证书脚本 注意：\n基于debian12\n基于bash，如果使用的是zsh需要自行研究是否需要转义\n使用nginx做反向代理，部署证书\n完全基于我个人的nginx使用习惯\n简介：\n*acme.sh 是一个运行在linux终端的证书申请脚本，可以申请免费和付费/企业级两种证书。*\n本笔记以申请ZeroSSL的证书为基准 acme.sh申请免费证书的机构虽然有5个，但是推荐的的机构只有三个，见下表\nCA名称 ZeroSSL\n(acme.sh默认) Let\u0026rsquo;s Encrypt (使用最广泛，最推荐) Google Public CA\n(谷歌提供的免费CA) 特点 90天有效期\n✅ 通配符支持 ✅ 无速率限制 🚫 通过邮箱或EAB强制验证 ✅自动续期不占用额度 ✅单证书验证域名数：100 90天有效期\n✅ 通配符支持 🚫速率：50张/域名/周\n✅ 无需账户/邮箱验证\n✅自动续期不占用额度\n✅单证书验证域名数：100 90天有效期\n✅ 通配符支持 🚫速率：100张/小时 🚫 通过GCP项目EAB强制认证 ✅自动续期不占用额度 ✅单证书验证域名数：100 ✅ 集成谷歌云服务 🚫项目账户申请证书 🚫限制：1000张/项目 安装与使用： 第一步：安装 如果是国内VPS，务必需要先执行这一行命令，修改一下host\n1 echo -e \u0026#34;185.199.111.154 github.githubassets.com\\n140.82.113.22 central.github.com\\n185.199.108.133 desktop.githubusercontent.com\\n185.199.109.133 camo.githubusercontent.com\\n185.199.109.133 github.map.fastly.net\\n151.101.193.194 github.global.ssl.fastly.net\\n140.82.116.3 gist.github.com\\n185.199.110.153 github.io\\n140.82.116.4 github.com\\n140.82.116.5 api.github.com\\n185.199.110.133 raw.githubusercontent.com\\n185.199.110.133 user-images.githubusercontent.com\\n185.199.110.133 favicons.githubusercontent.com\\n185.199.109.133 avatars5.githubusercontent.com\\n185.199.110.133 avatars4.githubusercontent.com\\n185.199.108.133 avatars3.githubusercontent.com\\n185.199.108.133 avatars2.githubusercontent.com\\n185.199.109.133 avatars1.githubusercontent.com\\n185.199.111.133 avatars0.githubusercontent.com\\n185.199.111.133 avatars.githubusercontent.com\\n140.82.116.10 codeload.github.com\\n52.217.229.201 github-cloud.s3.amazonaws.com\\n52.216.185.51 github-com\\n.s3.amazonaws.com\\n52.217.225.81 github-production-release-asset-2e65be.s3.amazonaws.com\\n52.217.120.41 github-production-user-asset-6210df.s3.amazonaws.com\\n3.5.28.232 github-production-repository-file-5c1aeb.s3.amazonaws.com\\n185.199.111.153 githubstatus.com\\n185.199.109.133 media.githubusercontent.com\\n185.199.108.133 objects.githubusercontent.com\\n185.199.109.133 raw.github.com\\n138.91.182.224 copilot-proxy.githubusercontent.com\u0026#34; \u0026gt; /etc/hosts 安装必要软件\n1 sudo apt install -y cron curl socat openssl git 通过git下载acme.sh包\n1 git clone https://github.com/acmesh-official/acme.sh.git 进入安装目录\n1 cd ./acme.sh 执行安装\n1 2 ./acme.sh --install # 不添加 -m 参数可以直接无邮箱安装（推荐） ./acme.sh --install -m myemail@example.com # 添加 -m 参数带邮箱注册安装（谷歌CA必需） 重启终端以启用命令\n1 source ~/.bashrc 启用脚本自动更新\n1 acme.sh --upgrade --auto-upgrade 第二部：配置 证书颁发机构配置\nacme.sh 刚下载好之后默认的证书颁发机构为ZeroSSL，如果希望使用此机构那么不用做修改\n将默认证书颁发机构改为Let\u0026rsquo;s Encrypt与Google Public CA的命令如下\n1 2 acme.sh --set-default-ca --server letsencrypt #将默认的证书颁发机构改成**Let\u0026#39;s Encrypt** acme.sh --set-default-ca --server google #将默认的证书颁发机构改成**Google Public CA** 证书颁发机构账号认证配置\nLet\u0026rsquo;s Encrypt无需账号配置，不需要邮箱或者密钥认证 ZeroSSL账号配置*（推荐我的这种方式，尽量不要用邮箱）;* ps:需要先到ZeroSSL官网中注册账户，并在Developer中创建EAB Credentials for ACME Clients 1 2 3 acme.sh --register-account --server zerossl \\ --eab-kid xxxxxxxxxxxx \\ --eab-hmac-key xxxxxxxxx Google Public CA账号配置\n1)需要先拥有一个Google Cloud Platform（GCP）账号，然后进入控制台左上角新建/选择一个项目\n2)在顶部搜索栏搜索并进入Public Certificate Authority API 之后点击启用\n3)再之后点击右上角shell图标进入Cloud Shell使用以下命令获取 EAB 密钥 ID 和 HMAC\n4)谷歌EAB密钥使用一次/七天后自动失效，所以每次申请证书的时候都要来获取一次密钥，但续费不用\n1 2 gcloud config set project projectID #进入项目设置 gcloud publicca external-account-keys create #申请密钥 5)在acme.sh中设置gcp账号和项目密钥\neab-kid是[申请到的 keyId]，eab-hmac-key是[申请到的 b64MacKey]\n邮箱可以随意写，但是每一个邮箱代表一个acme.sh账户，谷歌每一个项目只能认证100个此账户\n1 2 3 acme.sh --register-account -m myemail@example.com --server google \\ --eab-kid xxxxxxx \\ --eab-hmac-key xxxxxxx 第三部：申请证书 申请证书为了方便全都使用dns令牌的方式，以在cloudflare做dns为例\n可以把dns令牌写入 ~/.acme.sh/account.conf,但我推荐以下方式\n其他常见dns供应商配置，参见笔记末尾表格\n1 export CF_Token=\u0026#34;your cf token\u0026#34; 申请证书（通配符证书）\n1 2 3 4 acme.sh --issue --dns dns_cf \\ -d *.example.com \\ -d example.com \\ --keylength ec-256 申请证书（单个二级域名证书）\n1 2 3 acme.sh --issue --dns dns_cf \\ -d exp.example.com \\ --keylength ec-256 第四步：安装证书并部署 默认情况下证书存放在 ~/.acme.sh/example.com/目录下\n申请好证书以后就该安装证书了，我一般用nginx反向代理使用证书，就以nginx为例\n使用以下命令将证书与密钥安装到指定目录（sslFile是我自己在nginx目录下创建的）：\n1 2 3 4 acme.sh --install-cert -d *.example.com --ecc \\ --key-file /etc/nginx/sslFile/example.com/example.key \\ --fullchain-file /etc/nginx/sslFile/example.com/fullchain.cer \\ --reloadcmd \u0026#34;systemctl reload nginx\u0026#34; 番外步：疑难杂症 如果在通过EAB密钥认证账户或者申请证书的时候遇到了这些报错：\n1 2 Please refer to https://curl.haxx.se/libcurl/c/libcurl-errors.html for error code: 28 Please refer to https://curl.haxx.se/libcurl/c/libcurl-errors.html for error code: 35 那么使用以下命令调试一下，这可能是vps的问题，需要修复\n1 2 3 4 5 6 # 查看当前 MTU ip link show # 临时设置较小 MTU sudo ip link set dev eth0 mtu 1400 # 测试是否解决 curl -vI https://acme.zerossl.com/v2/DV90 --tlsv1.2 如果你的证书需要用在CDN平台或者其他的非本地服务的平台，比如国内的七牛云CDN那么可以使用acme.sh的官方远程部署脚本：deployhooks。 具体操作参见官方文档\n一些acme.sh常用的命令： 手动强制更新证书\n1 2 acme.sh --renew -d example.com -d *.example.com --force --ecc acme.sh --renew -d example.com -d *.example.com --force //非ECC证书使用此命令 查询域名申请证书的信息\n1 acme.sh --list 主要命令参数列表\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 -d ：后面跟的是域名凡是需要写域名的地方，之前一定要写这个参数 --help 或 -h ：显示帮助信息 --version 或 -v ：显示版本信息 --upgrade ：检查更新 --list ：列出证书 --set-default-ca --server：设置默认的证书颁发机构 --server ：单次申请设置证书颁发机构 --issue ：申请证书 --renew 或 -r ：更新证书 --use-wget ：使用wget代替curl获取证书（不常用，当你正常申请证书出现error code:35的时候用） --revoke ：吊销证书 --remove ：删除证书 --install-cert ：安装证书 --uninstall ：卸载acme.sh 常见DNS供应商 配置 机构 dns参数 token令牌命令（必须在申请证书之前操作） Cloudflare dns_cf CF_Token=\u0026ldquo;your cf token\u0026rdquo; 腾讯云 dns_dp export DP_Id=\u0026ldquo;123456\u0026rdquo;\nexport DP_Key=\u0026ldquo;abcdef\u0026rdquo; 阿里云 dns_ali export Ali_Key=\u0026ldquo;123456\u0026rdquo;\nexport Ali_Secret=\u0026ldquo;abcdef\u0026rdquo; 华为云 dns_huawei export HUAWEICLOUD_Username=\u0026quot;\u0026quot;\nexport HUAWEICLOUD_Password=\u0026quot;\u0026quot;\nexport HUAWEICLOUD_DomainName=\u0026quot;\u0026quot; GoDaddy dns_gd export GD_Key=\u0026quot;\u0026quot;\nexport GD_Secret=\u0026quot;\u0026quot; DigitalOcean dns_dgon export DO_API_KEY=\u0026quot;” netcup dns_netcup export NC_Apikey=\u0026quot;\u0026quot;\nexport NC_Apipw=\u0026quot;\u0026quot;\nexport NC_CID=\u0026quot;” Vultr DNS dns_vultr export VULTR_API_KEY=\u0026quot;\u0026quot; AWS Route53 dns_aws export AWS_ACCESS_KEY_ID=\u0026quot;\u0026quot;\nexport AWS_SECRET_ACCESS_KEY=\u0026quot;\u0026quot; Google Cloud DNS dns_gcloud export CLOUDSDK_ACTIVE_CONFIG_NAME=default Namecheap dns_namecheap export NAMECHEAP_USERNAME=\u0026quot;\u0026hellip;\u0026quot;\nexport NAMECHEAP_API_KEY=\u0026quot;\u0026hellip;\u0026quot;\nexport NAMECHEAP_SOURCEIP=\u0026quot;\u0026hellip;\u0026quot; # 必须添加 Hurricane Electric dns_he export HE_Username=\u0026quot;\u0026quot;\nexport HE_Password=\u0026quot;\u0026quot; Porkbun dns_porkbun export PORKBUN_API_KEY=\u0026quot;\u0026hellip;\u0026quot;\nexport PORKBUN_SECRET_API_KEY=\u0026quot;\u0026hellip;\u0026quot; ","date":"2025-08-16T02:57:00Z","image":"https://raw.githubusercontent.com/diannaSIN/blogImage/image/BlogImage/20250902011511585.png","permalink":"https://tencentx.us.kg/p/acme.sh%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6%E8%84%9A%E6%9C%AC/","title":"acme.sh申请证书脚本"},{"content":"服务器初始化设置 注意：基本上机遇Debian12\nDD系统 在购买到一台全新的vps之后，一般情况下 要DD系统，这里使用一键DD\n一键DD原项目仓库地址：Tools\n安装wget\n1 apt install wget sudo -y 下载脚本\n1 2 3 wget --no-check-certificate -qO InstallNET.sh \u0026#39;https://raw.githubusercontent.com/leitbogioro/Tools/master/Linux_reinstall/InstallNET.sh\u0026#39; \u0026amp;\u0026amp; chmod a+x InstallNET.sh # 国内vps使用这条命令 wget --no-check-certificate -qO InstallNET.sh \u0026#39;https://gitee.com/mb9e8j2/Tools/raw/master/Linux_reinstall/InstallNET.sh\u0026#39; \u0026amp;\u0026amp; chmod a+x InstallNET.sh 执行DD\n要选择与自己的操作系统对应的命令，以下五条命令都是常用的系统服务器使用该脚本的DD命令\n1 2 3 4 5 6 7 8 9 10 # 1\u0026gt; Debian12 sudo bash InstallNET.sh -debian # 2\u0026gt; Kali Rolling sudo bash InstallNET.sh -kali # 3\u0026gt; Alpine Linux Edge sudo bash InstallNET.sh -alpine # 4\u0026gt; CentOS 9 stream sudo bash InstallNET.sh -centos # 5\u0026gt; Ubuntu 22.04 sudo bash InstallNET.sh -ubuntu 脚本执行后在终端输入以下指令执行重启会自动安装系\n1 reboot DD系统后会生成默认的用户名与密码，DD系统后应该首先修改默认密码\n用户名与密码\n1 2 默认用户名：root 默认密码：LeitboGi0ro 如果DD系统后主机名是ip地址想要更换那么编辑以下内容更换为你想要的即可\n1 nvim /etc/hostname 默认连接设置 出于安全考虑，应该首先更改默认的ssh连接配置\n使用以下命令编辑ssh配置文件修改默认ssh连接端口\n1 sudo nvim /etc/ssh/sshd_config 编辑Port 为自己想要使用的端口默认为：\n1 Port 22 重启ssh服务\n1 sudo systemctl restart ssh ","date":"2025-08-16T02:45:00Z","image":"https://raw.githubusercontent.com/diannaSIN/blogImage/image/BlogImage/20250902011732503.jpeg","permalink":"https://tencentx.us.kg/p/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E8%AE%BE%E7%BD%AE/","title":"服务器初始化设置"}]